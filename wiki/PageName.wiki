#summary Shard Management API Design

= Introduction =

Tungsten Replicator tags each transaction with a shard ID on extraction, which is then used in features like shard-based replication.  Shard properties are currently controlled using a file named shard.list, which is simple to understand but not manageable either remotely nor in a dynamic fashion.   

This design describes a shard management interface that allows users to specify key shard properties dynamically through APIs.  Users may change shard properties on the fly and have them take effect through network calls only.  The shard management API also introduces the ability to drop or forward shards implemented by a specialized filter that reads shard management metadata. 

= Detailed Requirements =

The shard management API includes the following deliverables.  

  # A permanent shard management catalog for each Tungsten replication service that stores current disposition of shards.  The shard disposition will be “forward” or “drop”.  

  # A network API to manage the shard catalog will be added.  It will allow users to add, edit, or remove shard definitions. 

  # Corresponding trepctl commands to make shard management easily accessible to scripts. 

  # A shard filter that manages transactions of particular shards.  This filter can be added to any replicator pipeline.  The shard filter will read the shard catalog each time the pipeline goes online.  The shard filter will support the following dispositions of shard transactions: 

  ## Accept.  Forward the transaction normally. 
  ## Drop.  Drop the transaction. 
  ## Warn.  Drop the transaction and generate a warning in the log. 
  ## Error.  Signal a replication error.  This will cause the replicator to go offline. 

  # Options to set the disposition of new shards.  These will be added automatically to the shard catalog with one of the options described.  

  # One or more status commands to dump the current state of the shard catalog and any relevant shard processing diagnostics.  These will be extensions to the current ‘trepctl status –name shards’ command.  

  # Updates to Tungsten documentation to cover management of shards and use of the provided interfaces.  

  # Configuration recommendations for setup of all shard management features and to ensure that Tungsten replicator can process a shard catalog change within 15 seconds on a loaded system. 

= Implementation = 
== Architecture == 

Shard management includes the following key components.  

  * A new shard catalog table stored in the service database to track shards. 
  * A new JMX MBean API for shard management with associated trepctl options to invoke APIs from scripts
  * A simple shard filter that processes shards based on shard metadata.  The shard filter implements options for generating new shard options. 

== Shard Catalog Table == 

The shard catalog table is named trep_shard.  It is automatically created in the service database used for replication if it does not exist.  

The trep_shard table contains the following columns. 

|| *Name*      || *Type*       || *Key* || *Description* ||
|| name        || varchar(128) || PRI   || Shard name      ||
|| critical    || char(1)      ||       || If true, must serialize ||
|| disposition || varchar(30)  ||       || How to filter the shard ||
|| channel     || int(11)      ||       || Explicit channel or null ||

The disposition affects how the shard is processed by the shard filter.  The following values are allowed.  

|| *Value* || *Description*          ||
|| Accept || Forward the transaction ||
|| Drop   || Drop the transaction    ||
|| Warn   || Drop transaction and generate a warning in the log ||
|| Error  || Signal a replication error and go offline || 

== JMX API ==

Each replication service will offer an additional JMX MBean named ShardManagementMBean that contains operations for shard management.  The MBean will be published using a name derived from the service OpenReplicatorManagerMBean so that it is easy to find.  

The shard management JMX interface is designed to be extremely simple.  There are four basic operations:  add, update, delete, and list.  These use list structures that contain a list of shards, where the shards themselves are stored as name-value pairs. 

The ShardManagementMBean interfaces are described below. 

{{{
public interface ShardManagerMBean
{
    /**
     * Returns true so that clients can confirm connection liveness.
     * 
     * @return true if the service is up and running, false otherwise
     */
    public boolean isAlive();

    /**
     * Inserts a list of shards into the shard table. Each shard will be a map
     * of name-value parameters, for example, name -> my_shard, channel -> 2.
     * 
     * @param params a list of shards to be inserted
     */
    public void insert(List<Map<String, String>> params);

    /**
     * Updates a list of shards into the shard table. Each shard will be a map
     * of name-value parameters, for example, name -> my_shard, channel -> 2,
     * the key to be used to update being the shard name.
     * 
     * @param params a list of shards to be updated
     */
    public void update(List<Map<String, String>> params);

    /**
     * Deletes a list of shards based on shard ids (aka shard name). The list
     * will only contain shard ids.
     * 
     * @param params
     */
    public void delete(List<Map<String, String>> params);

    /**
     * Deletes all shards from the shard table.
     */
    public void deleteAll();

    /**
     * List all shards definitions
     * 
     * @returns A list of shards represented by maps of name-value.
     */
    public List<Map<String, String>> list();

}
}}}

Here is a simple example of usage. 
{{{
    // Shard management MBean and some data structures.  
    ShardManagementMBean mbean; 
    HashMap<String,String> shard;
    List<Map<String,String>> args = new ArrayList<Map<String,String>>();

    // ...look up mbean and connect. 
         
    // Insert a shard. 
    shard = new HashMap<String,String>();
    shard.put("name", "test");
    shard.put("critical", "false");
    shard.put("disposition", "accept");
    args.add(shard);
    mbean.insert(args);
        
    // Update a shard to add the channel number. 
    args.clear();
    shard.put("channel", "7");
    args.add(shard);
    mbean.update(args);
        
    // Delete the shard. 
    args.clear();
    shard = new HashMap<String,String>();
    shard.put("name", "test");
    args.add(shard);
    mbean.delete(args);
}}}

== Trepctl Additions for Shard Processing ==

The trepctl utility will be extended to add support for shard management.  There will be a new "shard" command with the following syntax: 

{{{
trepctl [-service name] shard { -insert | -update | -delete | -list}
}}}

The -list command lists all shards using a CSV format that looks like the following.  The first line is a comment with header values, while subsequent lines are whitespace-separated values. 

{{{
# name    critical    disposition    channel
db1       true        ENABLE         1
db2       false       WARN           3
}}}

The -insert, -update, and -delete options accept the same file type as 
input.  When reading input, blank lines and any line that starts with a # are ignored.  

You could can use these commands to do quick and easy edits on the shard catalog.  The following example shows how to dump the shard catalog, edit it, and reload.  

{{{
bin/trepctl -service test shard -list > file.out
vi file.out
bin/trepctl shard -service test -update < file.out
}}}

The last command will import the file and process data from it, updating rows that are found in the table and inserting new rows when not found.  The file processing will skip commented lines (#) as well as blank lines.

== Shard Filter == 