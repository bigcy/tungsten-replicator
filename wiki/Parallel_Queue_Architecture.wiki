#Parallel Queue Architecture

= Overview =

Tungsten Replicator uses _parallel queues_ to implement pipeline stages in which multiple tasks read and apply transactions concurrently.  The most significant application of this technique is known as _parallel apply_, which speeds up replication by executing slave updates on different shards in parallel.  

This wiki page summarizes the current parallel queue implementations.  It is not user documentation but rather describes the motivations behind the code as it currently stands and to make clear the trade-offs between different parallel queue approaches.  The goal is to provide orientation to help read the code, design tests, and develop new applications for parallel queues. 

= General Approach = 

== What We Mean by a Tungsten Parallel Queue == 

Tungsten Replicator uses a pipeline-based execution model, where pipelines are event flows that extract from a source and apply to a sink at the other end.  Pipelines consist of one or more stages, which implement extract-filter-apply loops to transfer events.  Stores sit between stages and buffer events as they pass through the pipeline. 

A Tungsten parallel queue is a type of [ Store] that demultiplexes a serialized store of events into multiple queues.   

= In-Memory Parallel Replication =

= Disk-Based Parallel Replication =